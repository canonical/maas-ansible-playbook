---
# will reset the system state to that prior to maas install

- hosts: all
  become: true
  vars:
    maas_deb_state: absent
    maas_installation_type: "{% if 'maas' in ansible_facts.packages %}deb{% else %}snap{% endif %}"
    maas_postgres_action: absent
    maas_proxy_state: absent
    maas_state: absent
  tasks:

  - name: "Collect facts about installed packages"
    package_facts:
      manager: auto
      strategy: all

  - name: "Collect facts about system services"
    service_facts:

  - name: Fetch maas install mode
    shell: sudo maas config #| grep 'Mode' | cut -d':'' -f2 | xargs
    register: maas_mode

  - name: determine the maas mode
    set_fact:
      maas_mode: "{{ maas_mode.stdout_lines | first | split(':') | last | trim }}"

  - name: "Uninstall MAAS region"
    ansible.builtin.include_role:
      name: "maas_region_controller"
      tasks_from: install_maas
    when: maas_mode == "region"

  - name: "Uninstall MAAS rack"
    ansible.builtin.include_role:
      name: maas_rack_controller
      tasks_from: install_maas
    when: maas_mode == "rack"

  - name: "Remove metrics"
    ansible.builtin.include_role:
      name: common
      tasks_from: metrics
    when: "'telemetry' in ansible_facts.services"

  - name: "Uninstall postgres primary"
    ansible.builtin.include_role:
      name: maas_postgres_primary
      tasks_from: main
    when: "'postgres' in ansible_facts.packages"

  - name: "Uninstall postgres secondary"
    ansible.builtin.include_role:
      name: maas_postgres_secondary
      tasks_from: main
    when: "'postgres' in ansible_facts.packages"

  - name: "Uninstall HAProxy"
    ansible.builtin.include_role:
      name: maas_proxy
      tasks_from: main
    when: "'haproxy' in ansible_facts.packages"

  - name: Remove ununsed packages from the cache
    ansible.builtin.apt:
      autoclean: true
