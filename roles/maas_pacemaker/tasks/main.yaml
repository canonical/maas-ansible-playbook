---
- name: "Install Pacemaker packages"
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
    update-cache: true
  with_items:
    - pacemaker
    - pcs
    - fence-agents
    - resource-agents-paf
  register: install_pacemaker
  notify: "Ensure Pacemaker is started"

- name: "Add temp file config for pacemaker-managed postgres"
  ansible.builtin.template:
    src: "postgresql-part.conf.j2"
    dest: "/etc/tmpfiles.d/postgresql-part.conf"
    owner: "root"
    group: "root"
    mode: 0644

- name: "Generate Pacemaker user Password"
  ansible.builtin.command: openssl rand -base64 14
  register: maas_pacemaker_user_password_output
  when: maas_pacemaker_user_password is undefined

- name: "Save Pacemaker user Password"
  ansible.builtin.set_fact:
    maas_pacemaker_user_password: "{{ maas_pacemaker_user_password_output.stdout }}"
    cacheable: true
  run_once: true
  delegate_to: "{{ item }}"
  delegate_facts: true
  loop: "{{ groups['maas_pacemaker'] }}"

- name: "Set pacemaker user password"
  ansible.builtin.user:
    name: "hacluster"
    password: "{{ maas_pacemaker_user_password | password_hash }}"

- name: "Configure ssh for pacemaker"
  ansible.builtin.template:
    src: pacemaker_sshd_config.j2
    dest: /etc/ssh/sshd_config.d/pacemaker_sshd.conf
    owner: "root"
    group: "root"
    mode: 0644
  notify: "Restart sshd"

- name: "Flush handlers"
  ansible.builtin.meta: flush_handlers

- name: "Auth cluster"
  ansible.builtin.shell:
    cmd: "pcs host auth {{ groups['maas_pacemaker'] | join(' ') }} -u hacluster -p '{{ maas_pacemaker_user_password }}' && touch /tmp/pacemaker_auth"
    creates: "/tmp/pacemaker_auth"
    executable: /bin/bash

- name: "Check if fencing is configured"
  ansible.builtin.shell:
    cmd: "set -o pipefail; pcs stonith status | tee {{ maas_pacemaker_tmp_status }}"
    creates: "{{ maas_pacemaker_tmp_status }}"
    executable: /bin/bash
  register: pacemaker_stonith_status

- name: "Configure PAF resource agent"
  ansible.builtin.shell:
    cmd: >
      pcs cluster cib {{ maas_pacemaker_tmp_cib }}\
      && stat {{ maas_pacemaker_tmp_cib }}
      && pcs resource defaults update migration-threshold=5\
      && pcs resource defaults update resource-stickiness=10\
      && pcs -f {{ maas_pacemaker_tmp_cib }}\
        stonith create {{ maas_pacemaker_fence_name }}_{{ ansible_hostname }}\
        {{ maas_pacemaker_fencing_driver }}\
        {%- for key, value in maas_pacemaker_stonith_params.items() %} {{ key }}={{ value }}{%- endfor -%}\
      && pcs -f {{ maas_pacemaker_tmp_cib }} constraint location {{ maas_pacemaker_fence_name }}_{{ ansible_hostname }}\
        avoids {{ ansible_hostname }}=INFINITY\
      && pcs -f {{ maas_pacemaker_tmp_cib }} resource create pgsqld ocf:heartbeat:pgsqlms\
        bindir="{{ maas_postgres_bin_dir }}"\
        pgdata="{{ maas_postgres_config_dir }}"\
        datadir="{{ maas_postgres_data_dir }}"\
        op start timeout=60s\
        op stop timeout=60s\
        op promote timeout=30s\
        op demote timeout=120s\
        op monitor interval=15s timeout=10s role="Master"\
        op monitor interval=16s timeout=10s role="Slave"\
        op notify timeout=60s\
        promotable notify=true\
      && pcs cluster cib-push scope=configuration {{ maas_pacemaker_tmp_cib }}\
      {%- if maas_postgres_floating_ip is defined -%}
      && pcs -f {{ maas_pacemaker_tmp_cib }} resource create pgsql-pri-ip ocf:heartbeat:IPaddr2\
        ip="{{ maas_postgres_floating_ip }}"\
        cidr_netmask="{{ maas_postgres_floating_ip_prefix_len }}"\
        op monitor interval=10s\
      && pcs -f {{ maas_pacemaker_tmp_cib }} constraint colocation add pgsql-pri-ip with master pgsqld-clone INFINITY\
      && pcs -f {{ maas_pacemaker_tmp_cib }} constraint order promote pgsqld-clone then start pgsql-pri-ip symmetrical=false kind=Mandatory\
      && pcs -f {{ maas_pacemaker_tmp_cib }} constraint order demote pgsqld-clone then stop pgsql-pri-ip symmetrical=false kind=Mandatory\
      {%- endif -%}
      && pcs cluster cib-push scope=configuration {{ maas_pacemaker_tmp_cib }}\
      && rm {{ maas_pacemaker_tmp_cib }}
    removes: "{{ maas_pacemaker_tmp_cib }}"
    executable: /bin/bash
  when: pacemaker_stonith_status.stdout == "NO stonith devices configured"
  run_once: true

- name: "Setup firewall"
  ansible.builtin.include_role:
    name: maas_firewall
    tasks_from: setup_firewall_rules
  vars:
    maas_open_tcp_ports:
      - 5432
      - 2224
    maas_open_udp_ports:
      - 5405
